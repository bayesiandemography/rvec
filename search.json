[{"path":"https://bayesiandemography.github.io/rvec/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Bayesian Demography Limited Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"sec:aims","dir":"Articles","previous_headings":"","what":"Aims of rvecs","title":"Package rvecs","text":"Many modern statistical methods, particularly Bayesian methods, produce random draws distribution. exceptionally useful feature draws can used make inferences derived quantities. procedure : Step 1. Calculate derived quantity random draws. Step 2. Summaries distribution derived quantities. , instance, randoms draws age-specific mortality rates, want make inferences life expectancy (summary indicator mortality rates), proceed follows: Step 1. Derive life expectancy set age-specific mortality rates. Step 2. Calculate means, medians, statistics life expectancies. theory behind manipulating random draws, argument R needs high-level tools help manipulation, see Kerman Gelman (2007). Package rvec provides tools working random draws. draws held structure called rvec, can, many purposes, treated like ordinary R vector, manipulated using ordinary base R tidyverse code. rvec also contains functions summarizing across random draws.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"toy-example","dir":"Articles","previous_headings":"2 Examples","what":"Toy example","title":"Package rvecs","text":"begin toy example, illustrate basic functionality. header <rvec_dbl<3>[1]> indicates rvec theta holds three random draws, double, , regarded vector, theta length 1. can perform standard mathematical operations: theta recycles match length vectors, including rvecs, summarize across random draws, use draws_* functions, e.g.","code":"library(rvec) l <- list(c(3, 1, 0)) theta <- rvec(l) theta #> <rvec_dbl<3>[1]> #> [1] 3,1,0 theta^2 + 1 #> <rvec_dbl<3>[1]> #> [1] 10,2,1 theta + c(1, -1) #> <rvec_dbl<3>[2]> #> [1] 4,2,1  2,0,-1 beta <- rvec(list(c(-0.2, 0.4, 0.1),                   c(-0.1, 0.1, 0.6))) beta           #> <rvec_dbl<3>[2]> #> [1] -0.2,0.4,0.1 -0.1,0.1,0.6 theta + beta #> <rvec_dbl<3>[2]> #> [1] 2.8,1.4,0.1 2.9,1.1,0.6 draws_mean(beta) #> [1] 0.1 0.2"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"sec:divorce","dir":"Articles","previous_headings":"2 Examples","what":"Divorce rates","title":"Package rvecs","text":"next example involved, includes use standard tidyverse packages. analyse posterior sample Bayesian model divorce rates New Zealand. rates divorces per thousand people per year, disaggregated age sex. First convert data ‘data base’ format, row describes single draw, rvec format, multiple draws folded rvec. number draws large, print method displays <median> (<2.5% quantile>, <97.5% quantile>) distribution, rather individual draws. define ‘total divorce rate’ number divorces person expect experience lifetime prevailing divorce rates. total divorce rate can calculated summarize across draws using draws_ci(), , default, calculates medians 95% credible intervals. Function draws_ci() returns tibble rather vector, , following standard mutate rules, explicitly create new columns. Next calculate ratio female male divorce rates, graph result","code":"library(dplyr, warn.conflicts = FALSE) library(tidyr) library(ggplot2) divorce #> # A tibble: 22,000 × 4 #>    age   sex     draw   rate #>    <fct> <chr>  <int>  <dbl> #>  1 15-19 Female     1 0.0462 #>  2 15-19 Female     2 0.0369 #>  3 15-19 Female     3 0.0448 #>  4 15-19 Female     4 0.0411 #>  5 15-19 Female     5 0.0333 #>  6 15-19 Female     6 0.0511 #>  7 15-19 Female     7 0.0249 #>  8 15-19 Female     8 0.0280 #>  9 15-19 Female     9 0.0339 #> 10 15-19 Female    10 0.0425 #> # ℹ 21,990 more rows divorce_rv <- divorce %>%   collapse_to_rvec(value = rate) divorce_rv #> # A tibble: 22 × 3 #>    age   sex                    rate #>    <fct> <chr>          <rdbl<1000>> #>  1 15-19 Female 0.036 (0.019, 0.068) #>  2 20-24 Female    0.67 (0.58, 0.78) #>  3 25-29 Female         3.2 (3, 3.4) #>  4 30-34 Female       5.8 (5.5, 6.1) #>  5 35-39 Female       6.5 (6.2, 6.9) #>  6 40-44 Female       7.1 (6.8, 7.4) #>  7 45-49 Female       7.2 (6.9, 7.6) #>  8 50-54 Female         6 (5.8, 6.3) #>  9 55-59 Female       4.4 (4.2, 4.7) #> 10 60-64 Female         2.7 (2.5, 3) #> # ℹ 12 more rows divorce_rv %>%   group_by(sex) %>%   summarise(TDR = sum(rate) * 5 / 1000) #> # A tibble: 2 × 2 #>   sex                  TDR #>   <chr>       <rdbl<1000>> #> 1 Female 0.22 (0.22, 0.23) #> 2 Male   0.23 (0.22, 0.23) divorce_rv %>%   group_by(sex) %>%   summarise(tdr = sum(rate) * 5 / 1000) %>%   mutate(draws_ci(tdr)) #> # A tibble: 2 × 5 #>   sex                  tdr tdr.lower tdr.mid tdr.upper #>   <chr>       <rdbl<1000>>     <dbl>   <dbl>     <dbl> #> 1 Female 0.22 (0.22, 0.23)     0.218   0.223     0.228 #> 2 Male   0.23 (0.22, 0.23)     0.221   0.226     0.231 divorce_ratio <- divorce_rv %>%   pivot_wider(names_from = sex, values_from = rate) %>%   mutate(ratio = Female / Male) %>%   mutate(draws_ci(ratio)) ggplot(divorce_ratio,        aes(x = age,             ymin = ratio.lower,             y = ratio.mid,            ymax = ratio.upper)) +   geom_pointrange()"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"sec:structure","dir":"Articles","previous_headings":"","what":"Structure of rvecs","title":"Package rvecs","text":"class \"rvec\" four subclasses: \"rvec_dbl\", holds doubles, e.g. 3.142, -1.01. \"rvec_int\", holds integers, e.g. 42, -1. \"rvec_lgl\", holds TRUE, FALSE, NA. \"rvec_chr\", hold characters, e.g. \"\", \"Thomas Bayes\". Internally, rvec matrix, row representing one unknown quantity, column representing one draw joint distribution unknown quantities, Ordinary functions applied independently column. instance, calling sum() rvec creates new rvec structure Functions draws_ prefix applied independently row. instance, calling draws_mean() rvec creates new numeric vector structure rvec holds fixed number draws. Two rvecs can used together function rvecs number draws, one rvecs single draw.","code":""},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"creating-rvecs","dir":"Articles","previous_headings":"","what":"Creating rvecs","title":"Package rvecs","text":"individual rvec can created list vectors, matrix, atomic vector Function rvec() chooses classes \"rvec_dbl\", \"rvec_int\", \"rvec_lgl\", \"rvec_chr\", based input. enforce particular class, use function rvec_dbl(), rvec_int(), rvec_lgl(), rvec_chr(), raw data take form database one draw per row, efficient way create rvecs use collapse_to_rvec(). See Section 2.2 example. Section 6 shows create rvec consisting draws standard probability distribution.","code":"x <- list(LETTERS, letters) rvec(x) #> <rvec_chr<26>[2]> #> [1] ..A.. ..a.. x <- matrix(rnorm(2000), nrow = 2) rvec(x) #> <rvec_dbl<1000>[2]> #> [1] -0.03 (-1.9, 1.9) 0.039 (-1.9, 2.1) x <- c(TRUE, FALSE) rvec(x) #> <rvec_lgl<1>[2]> #> [1] T F x <- list(1:3) rvec(x) #> <rvec_int<3>[1]> #> [1] 1,2,3 rvec_dbl(x) #> <rvec_dbl<3>[1]> #> [1] 1,2,3 rvec_chr(x) #> <rvec_chr<3>[1]> #> [1] \"1\",\"2\",\"3\""},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"mathematical-and-logical-operations","dir":"Articles","previous_headings":"","what":"Mathematical and logical operations","title":"Package rvecs","text":"Mathematical logical operations applied independently draw. User-defined functions consist entirely standard mathematical logical operations just work. Multiplying rvec matrix produces rvec, rvec contains suite functions summarising weighted data: weighted_mad() weighted_mean() weighted_median() weighted_sd() weighted_var() built functions package matrixStats.","code":"x <- rvec(list(c(TRUE, FALSE),                c(TRUE, TRUE))) all(x) #> <rvec_lgl<2>[1]> #> [1] T,F any(x) #> <rvec_lgl<2>[1]> #> [1] T,T logit <- function(p) log(p / (1-p)) tibble(   x = rvec(list(c(0.2, 0.4),                 c(0.6, 0.9))),   y = logit(x) ) #> # A tibble: 2 × 2 #>           x              y #>   <rdbl<2>>      <rdbl<2>> #> 1   0.2,0.4 -1.386,-0.4055 #> 2   0.6,0.9   0.4055,2.197 m <- rbind(c(1, 1),            c(0, 1)) x <- rvec(list(1:2,                3:4)) m %*% x #> <rvec_dbl<2>[2]> #> [1] 4,6 3,4"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"sec:prob","dir":"Articles","previous_headings":"","what":"Probability distributions","title":"Package rvecs","text":"Standard R probability functions dnorm() rbinom() allow rvec arguments. Package rvec provides modified functions . instance, return value rvec probability function rvec least one argument function rvec – one exception. exception random variate functions value suppplied special argument called n_draw. value n_draw supplied, return value rvec n_draw draws, convenient way create inputs simulation.","code":"y <- rvec(list(c(-1, 0.2),                c(3, -7))) mu <- rvec(list(c(0, 1),                 c(0, -1))) dnorm_rvec(y, mean = mu, sd = 3) #> <rvec_dbl<2>[2]> #> [1] 0.1258,0.1283 0.08066,0.018 rbinom_rvec(n = 2, size = round(y+10), prob = 0.8) #> <rvec_int<2>[2]> #> [1] 9,7  12,3 rnorm_rvec(n = 3, mean = 100, sd = 10, n_draw = 2) #> <rvec_dbl<2>[3]> #> [1] 78.08,101.6 102.6,112.9 103.2,110.3"},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"subsetting","dir":"Articles","previous_headings":"7 Manipulating rvecs","what":"Subsetting","title":"Package rvecs","text":"Standard R ways selecting elements vectors work rvecs. third case example common R idiom x[y], logical vector y used pick elements vector x. idiom also works y logical rvec, implement idiom, convention needed deal varying values within element y. instance, sample , need way handling second element y, consists one TRUE one FALSE. convention used rvec y picks element x draws y element TRUE. Looking across multiple draws y unavoidable implementing x[y]. However, typically behavior want working multiple draws. Instead, usually want process draw independently. can done using function if_else_rvec(), introduced Section 7.2.","code":"x <- rvec(list(a = 1:2,                b = 3:4,                c = 5:6)) x[1] #> <rvec_int<2>[1]> #>   a  #> 1,2 x[c(\"a\", \"c\")] #> <rvec_int<2>[2]> #>   a   c  #> 1,2 5,6 x[c(TRUE, FALSE, TRUE)] #> <rvec_int<2>[2]> #>   a   c  #> 1,2 5,6 x <- rvec(list(1:2,                3:4,                5:6)) y <- rvec(list(c(TRUE, TRUE),                c(TRUE, FALSE),                c(FALSE, FALSE))) x #> <rvec_int<2>[3]> #> [1] 1,2 3,4 5,6 y #> <rvec_lgl<2>[3]> #> [1] T,T T,F F,F x[y] #> <rvec_int<2>[1]> #> [1] 1,2 x[x <= 3] ## create 'y' on the fly #> <rvec_int<2>[1]> #> [1] 1,2"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"sec:ifelse","dir":"Articles","previous_headings":"7 Manipulating rvecs","what":"If-Else","title":"Package rvecs","text":"standard R function ifelse() work rvecs. tidyverse equivalent works true, false, missing arguments rvecs, , however, work condition argument rvec. case need rvec function if_else_rvec(), Function if_else_rvec() can used independently transform recode values across different draws,","code":"x <- rvec(list(1:2,                3:4)) if_else(condition = c(TRUE, FALSE),          true = x,         false = -x)         #> <rvec_int<2>[2]> #> [1] 1,2   -3,-4 if_else_rvec(x <= 2, x, 2) #> <rvec_dbl<2>[2]> #> [1] 1,2 2,2 x <- rvec(list(c(1, 3.3),                c(NA, -2))) x #> <rvec_dbl<2>[2]> #> [1] 1,3.3 NA,-2 x_recode <- if_else_rvec(is.na(x), 99, x) x_recode #> <rvec_dbl<2>[2]> #> [1] 1,3.3 99,-2"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"combining","dir":"Articles","previous_headings":"7 Manipulating rvecs","what":"Combining","title":"Package rvecs","text":"standard R concatenation function, c(), works rvecs, Unfortunately, cbind() rbind() made work properly raw rvecs, cbind() (rbind()) works rvecs contained data frames Tidyverse equivalents dplyr::bind_rows(), dbplyr::bind_cols(), vctrs::vec_cbind(), vctrs::vec_rbind() work rvecs, Base R function sapply() work rvecs (unless simplify set FALSE). rvec therefore supplies function called map_rvec() (based functions package purrr) job:","code":"x1 <- rvec(list(c(0.1, 0.2),                 c(0.3, 0.4))) x2 <- rvec(list(c(0.5, 0.6),                 c(0.7, 0.8))) c(x1, x2) #> <rvec_dbl<2>[4]> #> [1] 0.1,0.2 0.3,0.4 0.5,0.6 0.7,0.8 rbind(x1, x2) #>    data      #> x1 numeric,4 #> x2 numeric,4 cbind(x1, x2) #>      x1        x2        #> data numeric,4 numeric,4 df1 <- data.frame(x1) df2 <- data.frame(x2) cbind(df1, df2) #>        x1      x2 #> 1 0.1,0.2 0.5,0.6 #> 2 0.3,0.4 0.7,0.8 library(vctrs, warn.conflicts = FALSE) vec_cbind(x1, x2) #> New names: #> • `` -> `...1` #> • `` -> `...2` #>      ...1    ...2 #> 1 0.1,0.2 0.5,0.6 #> 2 0.3,0.4 0.7,0.8 l <- list(a = rvec(list(c(1, 4))),           b = rvec(list(c(9, 16)))) l #> $a #> <rvec_dbl<2>[1]> #> [1] 1,4 #>  #> $b #> <rvec_dbl<2>[1]> #> [1] 9,16 map_rvec(l, sqrt) #> <rvec_dbl<2>[2]> #>   a   b  #> 1,2 3,4"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"coercing","dir":"Articles","previous_headings":"7 Manipulating rvecs","what":"Coercing","title":"Package rvecs","text":"Function .matrix() returns data underlying rvec. Function as_list_col() returns list vectors Functions point_interval package ggdist accept lists vector. good way access sophisticated plotting facilities ggdist, packages tidybayes bayesplot use as_list_col() convert rvec list column. Function expand_from_rvec() inverse function collapse_to_rvec(), introduced Section 2.2.","code":"m <- matrix(1:6, nr = 2) m #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6 x <- rvec(m) x #> <rvec_int<3>[2]> #> [1] 1,3,5 2,4,6 as.matrix(x) #>      [,1] [,2] [,3] #> [1,]    1    3    5 #> [2,]    2    4    6 as_list_col(x) #> [[1]] #> [1] 1 3 5 #>  #> [[2]] #> [1] 2 4 6 divorce %>%   head(2) #> # A tibble: 2 × 4 #>   age   sex     draw   rate #>   <fct> <chr>  <int>  <dbl> #> 1 15-19 Female     1 0.0462 #> 2 15-19 Female     2 0.0369 divorce %>%   collapse_to_rvec(values = rate) %>%   head(2) #> # A tibble: 2 × 3 #>   age   sex                    rate #>   <fct> <chr>          <rdbl<1000>> #> 1 15-19 Female 0.036 (0.019, 0.068) #> 2 20-24 Female    0.67 (0.58, 0.78) divorce %>%   collapse_to_rvec(values = rate) %>%   expand_from_rvec() %>%   head(2) #> # A tibble: 2 × 4 #>   age   sex     draw   rate #>   <fct> <chr>  <int>  <dbl> #> 1 15-19 Female     1 0.0462 #> 2 15-19 Female     2 0.0369"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"summarising-distributions","dir":"Articles","previous_headings":"","what":"Summarising distributions","title":"Package rvecs","text":"functions rvec concerned deriving random vectors random vectors: , column-wise calculations described Section 3. derived random vectors, typically want summarise , using statistics means quantiles: , want carry row-wise calculations. functions carrying row-wise calculations rvecs : [draws_all()] [draws_any()] [draws_median()] [draws_mean()] [draws_mode()] [draws_ci()] [draws_quantile()] [draws_fun()] Internally, functions call functions matrixStats, makes fast. purposes, [draws_ci()], calculates credible intervals, useful draws functions,","code":"divorce_rv <- divorce %>%   collapse_to_rvec(value = rate) divorce_rv #> # A tibble: 22 × 3 #>    age   sex                    rate #>    <fct> <chr>          <rdbl<1000>> #>  1 15-19 Female 0.036 (0.019, 0.068) #>  2 20-24 Female    0.67 (0.58, 0.78) #>  3 25-29 Female         3.2 (3, 3.4) #>  4 30-34 Female       5.8 (5.5, 6.1) #>  5 35-39 Female       6.5 (6.2, 6.9) #>  6 40-44 Female       7.1 (6.8, 7.4) #>  7 45-49 Female       7.2 (6.9, 7.6) #>  8 50-54 Female         6 (5.8, 6.3) #>  9 55-59 Female       4.4 (4.2, 4.7) #> 10 60-64 Female         2.7 (2.5, 3) #> # ℹ 12 more rows divorce_rv %>%   mutate(draws_ci(rate)) #> # A tibble: 22 × 6 #>    age   sex                    rate rate.lower rate.mid rate.upper #>    <fct> <chr>          <rdbl<1000>>      <dbl>    <dbl>      <dbl> #>  1 15-19 Female 0.036 (0.019, 0.068)     0.0193   0.0360     0.0678 #>  2 20-24 Female    0.67 (0.58, 0.78)     0.579    0.673      0.782  #>  3 25-29 Female         3.2 (3, 3.4)     3.02     3.22       3.45   #>  4 30-34 Female       5.8 (5.5, 6.1)     5.54     5.80       6.06   #>  5 35-39 Female       6.5 (6.2, 6.9)     6.21     6.54       6.86   #>  6 40-44 Female       7.1 (6.8, 7.4)     6.85     7.13       7.42   #>  7 45-49 Female       7.2 (6.9, 7.6)     6.87     7.22       7.57   #>  8 50-54 Female         6 (5.8, 6.3)     5.77     6.03       6.33   #>  9 55-59 Female       4.4 (4.2, 4.7)     4.17     4.40       4.66   #> 10 60-64 Female         2.7 (2.5, 3)     2.48     2.72       2.99   #> # ℹ 12 more rows"},{"path":"https://bayesiandemography.github.io/rvec/articles/vig1_overview.html","id":"other-packages","dir":"Articles","previous_headings":"","what":"Other packages","title":"Package rvecs","text":"first R package provide specialized object handling multiple draws rv. object, called rv, can manipulated summarized much like rvec. However, software terms, rv strictly vector (calling .vector() one returns FALSE) rv always behave expected inside data frame. therefore well suited tidyverse-style work flows. R package posterior provides several data structures handling multiple draws, including one, called rvar, similar rvec. rvar , however, limited single dimension, special facilities dealing multiple chains (produced Markov chain Monte Carlo methods.) features essential analyses, can make rvars harder master, needed tidyverse-style work flows. Whereas rvecs interpret summary functions mean() sum() operations applied independently draw, rvars interpret operations applied across draws. result code written ordinary R vectors often work rvecs, need modification work rvars. tidyverse function count(), instance, works rvecs rvars.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Bryant. Author, maintainer. Bayesian Demography Limited. Copyright holder.","code":""},{"path":"https://bayesiandemography.github.io/rvec/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryant J (2023). rvec: Vector Representing Random Variable. R package version 0.0.2, https://bayesiandemography.github.io/rvec/.","code":"@Manual{,   title = {rvec: Vector Representing a Random Variable},   author = {John Bryant},   year = {2023},   note = {R package version 0.0.2},   url = {https://bayesiandemography.github.io/rvec/}, }"},{"path":"https://bayesiandemography.github.io/rvec/index.html","id":"rvec-","dir":"","previous_headings":"","what":"Vector Representing a Random Variable","title":"Vector Representing a Random Variable","text":"Tools working multiple random draws, including output simulation Bayesian analysis. main data structure rvec, holds multiple draws, behaves (mainly) like standard R vector.","code":""},{"path":"https://bayesiandemography.github.io/rvec/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Representing a Random Variable","text":"","code":"## install.packages(\"rvec\")                         ## CRAN version - not ready yet devtools::install_github(\"bayesiandemography/rvec\") ## development version"},{"path":"https://bayesiandemography.github.io/rvec/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Vector Representing a Random Variable","text":"Create rvec. Perform arithmetic . Put tibble. Manipulate tibble. Summarise .","code":"library(rvec, warn.conflicts = FALSE) library(dplyr, warn.conflicts = FALSE) x <- rvec(rbind(c(10, 11),                 c(100, 101),                 c(1000, 1001))) x #> <rvec_dbl<2>[3]> #> [1] 10,11     100,101   1000,1001 x + 1 #> <rvec_dbl<2>[3]> #> [1] 11,12     101,102   1001,1002 df <- tibble(g = c(1, 2, 1), x) df #> # A tibble: 3 × 2 #>       g         x #>   <dbl> <rdbl<2>> #> 1     1     10,11 #> 2     2   100,101 #> 3     1 1000,1001 df %>%   group_by(g) %>%   count(wt = x) #> # A tibble: 2 × 2 #> # Groups:   g [2] #>       g         n #>   <dbl> <rdbl<2>> #> 1     1 1010,1012 #> 2     2   100,101 draws_mean(x) #> [1]   10.5  100.5 1000.5"},{"path":"https://bayesiandemography.github.io/rvec/reference/as_list_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to list column — as_list_col","title":"Convert to list column — as_list_col","text":"Convert rvec matrix list can used list column data frame.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/as_list_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to list column — as_list_col","text":"","code":"as_list_col(x)  # S3 method for rvec as_list_col(x)  # S3 method for matrix as_list_col(x)"},{"path":"https://bayesiandemography.github.io/rvec/reference/as_list_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to list column — as_list_col","text":"x rvecs matrix.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/as_list_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to list column — as_list_col","text":"list: x rvec, list contains length(x) vectors, n_draw(x) elements. x matrix, list contains nrow(x) vectors, ncol(x) elements.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/as_list_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to list column — as_list_col","text":"","code":"l <- list(1:3,           4:6) r <- rvec(l) as_list_col(r) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 #>"},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"collapse_to_rvec() converts data frame 'database' format 'rvec' format. expand_from_rvec() converts data frame rvecs format database format.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"","code":"collapse_to_rvec(data, draw = draw, values = value, type = NULL)  # S3 method for data.frame collapse_to_rvec(data, draw = draw, values = value, type = NULL)  # S3 method for grouped_df collapse_to_rvec(data, draw = draw, values = value, type = NULL)  expand_from_rvec(data, draw = \"draw\")  # S3 method for data.frame expand_from_rvec(data, draw = \"draw\")  # S3 method for grouped_df expand_from_rvec(data, draw = \"draw\")"},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"data data frame, possibly grouped. draw <tidyselect> variable uniquely identifies random draws within combination values '' variables. Must quoted expand_from_rvec(). values <tidyselect> One variables data hold measurements. type Code specifying class rvec use value, combined string. Optional.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"data frame. collapse_to_rvec() reduces number rows factor n_draw(). expand_from_rvec() increases number rows factor n_draw(). collapse_to_rvec() silently drops variables draw, value grouping variables data grouped data frame.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"database format, row represents one random draw. data frame contains 'draw' variable distinguishes different draws within combination '' variables. rvec format, row represents one combination '' variables, multiple draws stored rvec. See examples.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"data-frame-variables","dir":"Reference","previous_headings":"","what":"Data frame variables","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"collapse_to_rvec() expand_from_rvec() operate three kinds variables: 'values' variables, holding hold measurements random uncertain quantity. collapse_to_rvec(), values variables specified values argument. expand_from_rvec() treats rvecs value variables. draw variable, used uniquely identify draw database format, within combination '' values. Specified draw argument. '' variables, hold covariates classification variables. - data ordinary data frame, collapse_to_rvec() expand_from_rvec() assume variables values draw variables '' variables. - data grouped data frame, collapse_to_rvec() expand_from_rvec() assume grouping variables variables.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"type-argument","dir":"Reference","previous_headings":"","what":"type argument","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"default, collapse_to_rvec() calls function rvec() values variable data. rvec() chooses rvec_chr, rvec_dbl, rvec_int, rvec_lgl`, based contents values variable. Instead leaving choice class rvec(), can specified advance, using type argument. type string, character specifies class corresponding values variable. characters following meanings: \"c\": rvec_chr \"d\": rvec_dbl \"\": rvec_int \"l\": rvec_lgl \"?\": Depends inputs. codes modified ones used readr package.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/collapse_to_rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame between 'database'\nand 'rvec' formats — collapse_to_rvec","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data_db <- tribble(   ~occupation,    ~sim, ~pay,   \"Statistician\", 1,    100,   \"Statistician\", 2,    80,   \"Statistician\", 3,    105,   \"Banker\",       1,    400,   \"Banker\",       2,    350,   \"Banker\",       3,    420 )  ## database format to rvec format data_rv <- data_db %>%   collapse_to_rvec(draw = sim,                    values = pay) data_rv #> # A tibble: 2 × 2 #>   occupation           pay #>   <chr>          <rdbl<3>> #> 1 Statistician  100,80,105 #> 2 Banker       400,350,420  ## rvec format to database format data_rv %>%   expand_from_rvec() #> # A tibble: 6 × 3 #>   occupation    draw   pay #>   <chr>        <int> <dbl> #> 1 Statistician     1   100 #> 2 Statistician     2    80 #> 3 Statistician     3   105 #> 4 Banker           1   400 #> 5 Banker           2   350 #> 6 Banker           3   420  ## provide a name for the draw variable data_rv %>%   expand_from_rvec(draw = \"sim\") #> # A tibble: 6 × 3 #>   occupation     sim   pay #>   <chr>        <int> <dbl> #> 1 Statistician     1   100 #> 2 Statistician     2    80 #> 3 Statistician     3   105 #> 4 Banker           1   400 #> 5 Banker           2   350 #> 6 Banker           3   420  ## specify that rvec variable ## must be rvec_int data_rv <- data_db %>%   collapse_to_rvec(draw = sim,                    values = pay,                    type = \"i\")  ## if we add add a redundant variable, ## then our earlier call no longer works data_db2 <- data_db %>%   mutate(newcol = 1:6) try(   data_db2 %>%     collapse_to_rvec(draw = sim,                      values = pay) ) #> Error : Missing combination of values for 'by' and 'draw' variables: #>   `occupation`: \"Statistician\" #>   `newcol`: 2 #>   `sim`: 1  ## one solution: use 'group_by' to ## specify the 'by' variables data_db2 %>%   group_by(occupation) %>%   collapse_to_rvec(draw = sim,                    values = pay) #> # A tibble: 2 × 2 #> # Groups:   occupation [2] #>   occupation           pay #>   <chr>          <rdbl<3>> #> 1 Statistician  100,80,105 #> 2 Banker       400,350,420"},{"path":"https://bayesiandemography.github.io/rvec/reference/divorce.html","id":null,"dir":"Reference","previous_headings":"","what":"Divorce rates in New Zealand — divorce","title":"Divorce rates in New Zealand — divorce","text":"Posterior sample model divorce rates New Zealand.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/divorce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divorce rates in New Zealand — divorce","text":"","code":"divorce"},{"path":"https://bayesiandemography.github.io/rvec/reference/divorce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Divorce rates in New Zealand — divorce","text":"tibble 30,000 rows following variables: age: Age, 5-year age groups, 15-19 65+. sex: \"Female\" \"Male\". draw: Index random draw. rate: Divorce rate, per 1000.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/divorce.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Divorce rates in New Zealand — divorce","text":"Derived data tables \"Age divorces sex (marriages civil unions) (Annual-Dec)\" \"Estimated Resident Population Age Sex (1991+) (Annual-Dec)\" online database Infoshare Statistics New Zealand website, downloaded 22 March 2023.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical operations across random draws — draws_all","title":"Logical operations across random draws — draws_all","text":"Apply logical summaries across random draws.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical operations across random draws — draws_all","text":"","code":"draws_all(x, na_rm = FALSE)  # S3 method for rvec_chr draws_all(x, na_rm = FALSE)  # S3 method for rvec draws_all(x, na_rm = FALSE)  draws_any(x, na_rm = FALSE)  # S3 method for rvec_chr draws_any(x, na_rm = FALSE)  # S3 method for rvec draws_any(x, na_rm = FALSE)"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical operations across random draws — draws_all","text":"x object class rvec. na_rm Whether remove NAs calculating summaries. Default FALSE.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical operations across random draws — draws_all","text":"vector.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical operations across random draws — draws_all","text":"","code":"m <- rbind(a = c(TRUE,  FALSE,  TRUE),            b = c(TRUE,  TRUE,   TRUE),            c = c(FALSE, FALSE,  FALSE)) x <- rvec(m) x #> <rvec_lgl<3>[3]> #>     a     b     c  #> T,F,T T,T,T F,F,F  draws_all(x) #>     a     b     c  #> FALSE  TRUE FALSE  draws_any(x) #>     a     b     c  #>  TRUE  TRUE FALSE"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Credible intervals from random draws — draws_ci","title":"Credible intervals from random draws — draws_ci","text":"Summarise distribution random draws rvec, using simple credible interval.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Credible intervals from random draws — draws_ci","text":"","code":"draws_ci(x, width = 0.95, prefix = NULL, na_rm = FALSE)  # S3 method for rvec draws_ci(x, width = 0.95, prefix = NULL, na_rm = FALSE)  # S3 method for rvec_chr draws_ci(x, width = 0.95, prefix = NULL, na_rm = FALSE)"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Credible intervals from random draws — draws_ci","text":"x object class rvec. width number, 0 < width <= 1. Default 0.975. prefix String added names columns result. Defaults name x. na_rm Whether remove NAs calculating summaries. Default FALSE.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Credible intervals from random draws — draws_ci","text":"tibble three columns.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Credible intervals from random draws — draws_ci","text":"tempting assign results call draws_ci() column base R data frame tibble, my_df$ci <- draws_ci(my_rvec) However, creating columns way currently corrupts data frames tibbles. safer options, see examples .","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Credible intervals from random draws — draws_ci","text":"","code":"set.seed(0) m <- rbind(a = rnorm(100, mean = 5, sd = 2),            b = rnorm(100, mean = -3, sd = 3),            c = rnorm(100, mean = 0, sd = 20)) x <- rvec(m) x #> <rvec_dbl<100>[3]> #>                a                b                c  #>     4.9 (2, 8.2) -3.6 (-7.1, 2.9)    1.1 (-35, 36)  draws_ci(x) #> # A tibble: 3 × 3 #>   x.lower x.mid x.upper #>     <dbl> <dbl>   <dbl> #> 1    2.02  4.93    8.23 #> 2   -7.06 -3.61    2.87 #> 3  -35.3   1.06   36.1   ## results from 'draws_ci' ## assigned to a data frame library(dplyr) df <- data.frame(x)  ## base R approach cbind(df, draws_ci(x)) #>                  x    x.lower     x.mid   x.upper #> 1     4.9 (2, 8.2)   2.017346  4.934077  8.228987 #> 2 -3.6 (-7.1, 2.9)  -7.058286 -3.611295  2.872534 #> 3    1.1 (-35, 36) -35.275211  1.061243 36.052985  ## a tidyverse alternative: ## mutate with no '=' df %>% mutate(draws_ci(x)) #>                  x    x.lower     x.mid   x.upper #> 1     4.9 (2, 8.2)   2.017346  4.934077  8.228987 #> 2 -3.6 (-7.1, 2.9)  -7.058286 -3.611295  2.872534 #> 3    1.1 (-35, 36) -35.275211  1.061243 36.052985"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply summary function across random draws — draws_fun","title":"Apply summary function across random draws — draws_fun","text":"Summarise distribution random draws rvec, using function.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply summary function across random draws — draws_fun","text":"","code":"draws_fun(x, fun, ...)  # S3 method for rvec draws_fun(x, fun, ...)"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply summary function across random draws — draws_fun","text":"x object class rvec. fun function. ... Additional arguments passed fun.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply summary function across random draws — draws_fun","text":"results calls fun, combined using vctrs::vec_c().","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply summary function across random draws — draws_fun","text":"","code":"set.seed(0) m <- rbind(a = rnorm(100, mean = 5, sd = 2),            b = rnorm(100, mean = -3, sd = 3),            c = rnorm(100, mean = 0, sd = 20)) x <- rvec(m) x #> <rvec_dbl<100>[3]> #>                a                b                c  #>     4.9 (2, 8.2) -3.6 (-7.1, 2.9)    1.1 (-35, 36)  draws_fun(x, fun = mad) #>         a         b         c  #>  1.846920  3.249964 19.154147  draws_fun(x, fun = range) #> $a #> [1] 0.5521995 9.8827293 #>  #> $b #> [1] -8.040548  4.975974 #>  #> $c #> [1] -58.09798  50.14222 #>  draws_fun(x, weighted.mean, wt = runif(100)) #>         a         b         c  #>  5.045337 -3.136655  1.344426  draws_fun(x, function(x) sd(x) / mean(x)) #>          a          b          c  #>  0.3498875 -0.9234251 15.6516656"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Medians, means, and modes across random draws — draws_median","title":"Medians, means, and modes across random draws — draws_median","text":"Summarise distribution random draws rvec, using means, medians, modes.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Medians, means, and modes across random draws — draws_median","text":"","code":"draws_median(x, na_rm = FALSE)  # S3 method for rvec_chr draws_median(x, na_rm = FALSE)  # S3 method for rvec draws_median(x, na_rm = FALSE)  draws_mean(x, na_rm = FALSE)  # S3 method for rvec draws_mean(x, na_rm = FALSE)  # S3 method for rvec_chr draws_mean(x, na_rm = FALSE)  draws_mode(x, na_rm = FALSE)  # S3 method for rvec draws_mode(x, na_rm = FALSE)"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Medians, means, and modes across random draws — draws_median","text":"x object class rvec. na_rm Whether remove NAs calculating summaries. Default FALSE.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Medians, means, and modes across random draws — draws_median","text":"vector.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Medians, means, and modes across random draws — draws_median","text":"method \"mode\", reduce_rvec() returns common value observation. tie, returns NA.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Medians, means, and modes across random draws — draws_median","text":"","code":"m <- rbind(a = c(1, 1, 1, 2, 3),            b = c(2, 4, 0, 2, 3),            c = c(0, 0, 1, 0, 100)) x <- rvec(m) x #> <rvec_dbl<5>[3]> #>            a            b            c  #>   1 (1, 2.9) 2 (0.2, 3.9)    0 (0, 90)  draws_median(x) #> a b c  #> 1 2 0  draws_mean(x) #>    a    b    c  #>  1.6  2.2 20.2  draws_mode(x) #> a b c  #> 1 2 0"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantiles across random draws — draws_quantile","title":"Quantiles across random draws — draws_quantile","text":"Summarise distribution random draws rvec, using quantiles.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantiles across random draws — draws_quantile","text":"","code":"draws_quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), na_rm = FALSE)  # S3 method for rvec draws_quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), na_rm = FALSE)  # S3 method for rvec_chr draws_quantile(x, probs = c(0.025, 0.25, 0.5, 0.75, 0.975), na_rm = FALSE)"},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantiles across random draws — draws_quantile","text":"x object class rvec. probs Vector probabilities. na_rm Whether remove NAs calculating summaries. Default FALSE.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantiles across random draws — draws_quantile","text":"tibble.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantiles across random draws — draws_quantile","text":"probs argument defaults c(0.025, 0.25, 0.5, 0.75, 0.975), values needed median, 50% credible intervals, 95% credible interval.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Quantiles across random draws — draws_quantile","text":"tempting assign results call draws_quantile() column base R data frame tibble, my_df$quantile <- draws_quantile(my_rvec) However, creating data frame columns way currently seems corrupt data frames tibbles. safer options, see examples .","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/draws_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantiles across random draws — draws_quantile","text":"","code":"set.seed(0) m <- rbind(a = rnorm(100, mean = 5, sd = 2),            b = rnorm(100, mean = -3, sd = 3),            c = rnorm(100, mean = 0, sd = 20)) x <- rvec(m) x #> <rvec_dbl<100>[3]> #>                a                b                c  #>     4.9 (2, 8.2) -3.6 (-7.1, 2.9)    1.1 (-35, 36)  draws_quantile(x) #> # A tibble: 3 × 5 #>    x_2.5   x_25  x_50  x_75 x_97.5 #>    <dbl>  <dbl> <dbl> <dbl>  <dbl> #> 1   2.02   3.86  4.93  6.25   8.23 #> 2  -7.06  -5.60 -3.61 -1.24   2.87 #> 3 -35.3  -12.3   1.06 13.0   36.1   ## results from 'draws_quantile' ## assigned to a data frame library(dplyr) df <- data.frame(x)  ## base R approach cbind(df, draws_quantile(x)) #>                  x      x_2.5       x_25      x_50      x_75    x_97.5 #> 1     4.9 (2, 8.2)   2.017346   3.861163  4.934077  6.250702  8.228987 #> 2 -3.6 (-7.1, 2.9)  -7.058286  -5.600306 -3.611295 -1.239950  2.872534 #> 3    1.1 (-35, 36) -35.275211 -12.331310  1.061243 13.036488 36.052985  ## a tidyverse alternative: ## mutate with no '=' df %>%   mutate(draws_quantile(x)) #>                  x      x_2.5       x_25      x_50      x_75    x_97.5 #> 1     4.9 (2, 8.2)   2.017346   3.861163  4.934077  6.250702  8.228987 #> 2 -3.6 (-7.1, 2.9)  -7.058286  -5.600306 -3.611295 -1.239950  2.872534 #> 3    1.1 (-35, 36) -35.275211 -12.331310  1.061243 13.036488 36.052985"},{"path":"https://bayesiandemography.github.io/rvec/reference/if_else_rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised if-else, when condition is an rvec — if_else_rvec","title":"Vectorised if-else, when condition is an rvec — if_else_rvec","text":"version if_else situation condition rvec.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/if_else_rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised if-else, when condition is an rvec — if_else_rvec","text":"","code":"if_else_rvec(condition, true, false, missing = NULL, size = NULL)"},{"path":"https://bayesiandemography.github.io/rvec/reference/if_else_rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised if-else, when condition is an rvec — if_else_rvec","text":"condition object class rvec_lgl. true, false Vectors (including rvecs) use TRUE FALSE values condition. missing Vectors use NA values condition. Optional. size Length output. Optional.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/if_else_rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorised if-else, when condition is an rvec — if_else_rvec","text":"rvec number draws condition.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/if_else_rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised if-else, when condition is an rvec — if_else_rvec","text":"","code":"x <- rvec(list(c(1, 11),                c(2, 5),                c(22, 6)))  x > 10 ## rvec_lgl #> <rvec_lgl<2>[3]> #> [1] F,T F,F T,F  ## if_else_rvec needed when ## 'condition' is an rvec if_else_rvec(x > 10, 10, x) #> <rvec_dbl<2>[3]> #> [1] 1,10 2,5  10,6  ## dplyr::if_else works when ## 'true', 'false', or 'missing' ## (but not 'condition') are rvecs library(dplyr) if_else(c(TRUE, FALSE, TRUE), x, 100) #> <rvec_dbl<2>[3]> #> [1] 1,11    100,100 22,6"},{"path":"https://bayesiandemography.github.io/rvec/reference/is_rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Test whether an object is an rvec — is_rvec","title":"Test whether an object is an rvec — is_rvec","text":"Test whether x inherits class \"rvec\".","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/is_rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test whether an object is an rvec — is_rvec","text":"","code":"is_rvec(x)"},{"path":"https://bayesiandemography.github.io/rvec/reference/is_rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test whether an object is an rvec — is_rvec","text":"x object.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/is_rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test whether an object is an rvec — is_rvec","text":"TRUE FALSE.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/is_rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test whether an object is an rvec — is_rvec","text":"","code":"x <- rvec_dbl() is_rvec(x) #> [1] TRUE"},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function and combine into an rvec — map_rvec","title":"Apply a function and combine into an rvec — map_rvec","text":"Apply function .f element .x, combine results rvec length .x.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function and combine into an rvec — map_rvec","text":"","code":"map_rvec(.x, .f, ...)"},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function and combine into an rvec — map_rvec","text":".x vector. .f function. ... Additional arguments passed .f.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function and combine into an rvec — map_rvec","text":"rvec length .x.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function and combine into an rvec — map_rvec","text":"call function .f produce rvec length 1.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/map_rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function and combine into an rvec — map_rvec","text":"","code":"l <- list(a = rvec(matrix(1:2, 1)),           b = rvec(matrix(1:4, 2)),           c = rvec(matrix(1:6, 3))) l #> $a #> <rvec_int<2>[1]> #> [1] 1,2 #>  #> $b #> <rvec_int<2>[2]> #> [1] 1,3 2,4 #>  #> $c #> <rvec_int<2>[3]> #> [1] 1,4 2,5 3,6 #>  map_rvec(l, sum) #> <rvec_int<2>[3]> #>    a    b    c  #>  1,2  3,7 6,15   ## sapply does not work with rvecs sapply(l, sum) #> $a.data #>      [,1] [,2] #> [1,]    1    2 #>  #> $b.data #>      [,1] [,2] #> [1,]    3    7 #>  #> $c.data #>      [,1] [,2] #> [1,]    6   15 #>"},{"path":"https://bayesiandemography.github.io/rvec/reference/matrixOps.rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix multiplication with rvecs — matrixOps.rvec","title":"Matrix multiplication with rvecs — matrixOps.rvec","text":"Matrix multiplication %*% can used rvecs. However, constrast standard R vectors, multiplying rvec matrix produce row column vector. Instead produces ordinary rvec, dimensions.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/matrixOps.rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix multiplication with rvecs — matrixOps.rvec","text":"","code":"# S3 method for rvec matrixOps(e1, e2)"},{"path":"https://bayesiandemography.github.io/rvec/reference/matrixOps.rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix multiplication with rvecs — matrixOps.rvec","text":"e1, e2 Vectors, matrices, rvecs.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/matrixOps.rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix multiplication with rvecs — matrixOps.rvec","text":"rvec, e1 e2 rvec.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/matrixOps.rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matrix multiplication with rvecs — matrixOps.rvec","text":"","code":"A <- matrix(c(10, 10, 10,               11, 11, 11),             nrow = 2, byrow = TRUE) x <- rvec(list(c(1, 2),                c(3, 4),                c(5, 6))) A %*% x #> <rvec_dbl<2>[2]> #> [1] 90,120 99,132  ## matrix multiplication with an ## ordinary R matrix produces ## a row or column vector y <- c(1, 3, 5) A %*% y #>      [,1] #> [1,]   90 #> [2,]   99"},{"path":"https://bayesiandemography.github.io/rvec/reference/missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing, finite, and infinite values\nin rvecs — missing","title":"Missing, finite, and infinite values\nin rvecs — missing","text":"rvec methods .na(), .nan(), .finite(), .infinite() return rvecs, separate values every draw. rvec method anyNA() returns TRUE value draw NA NaN, returns FALSE otherwise. Functions na.omit() na.exclude() return versions x observations NA draws omitted.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing, finite, and infinite values\nin rvecs — missing","text":"","code":"# S3 method for rvec anyNA(x, recursive = FALSE)  # S3 method for rvec is.na(x)  # S3 method for rvec na.exclude(object, ...)  # S3 method for rvec na.omit(object, ...)"},{"path":"https://bayesiandemography.github.io/rvec/reference/missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing, finite, and infinite values\nin rvecs — missing","text":"x, object rvec. recursive Whether anyNA() applied recursively lists. Ignored x rvec. ... Currently ignored.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/missing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missing, finite, and infinite values\nin rvecs — missing","text":"behavior rvec methods .na(), .nan(), .finite(), .infinite() differs standard vctrs behavior, return logical vector length equal length(x). rvecs, standard vctrs behavior entail summarising across draws, job draws_* functions.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing, finite, and infinite values\nin rvecs — missing","text":"","code":"x <- rvec(list(c(1.2, NA),                c(Inf, 3),                c(-1, NaN)))  ## return a logical rvec is.na(x) #> <rvec_lgl<2>[3]> #> [1] F,T F,F F,T is.nan(x) #> <rvec_lgl<2>[3]> #> [1] F,F F,F F,T is.finite(x) #> <rvec_lgl<2>[3]> #> [1] T,F F,T T,F is.infinite(x) #> <rvec_lgl<2>[3]> #> [1] F,F T,F F,F  ## return a logical scalar anyNA(x) #> [1] TRUE  ## return an NA-free version of 'x' na.omit(x) #> <rvec_dbl<2>[1]> #> [1] Inf,3 na.exclude(x) #> <rvec_dbl<2>[1]> #> [1] Inf,3  ## use 'if_else_rvec' to modify values ## within rvec if_else_rvec(is.na(x), 999, x) #> <rvec_dbl<2>[3]> #> [1] 1.2,999 Inf,3   -1,999   ## vctrs functions library(vctrs, warn.conflicts = FALSE) ## all draws missing vec_detect_missing(x) #> [1] FALSE FALSE FALSE ## any draws missing vec_detect_complete(x) #> [1] FALSE  TRUE FALSE"},{"path":"https://bayesiandemography.github.io/rvec/reference/n_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of draws in a random sample — n_draw","title":"Number of draws in a random sample — n_draw","text":"Number draws random sample","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/n_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of draws in a random sample — n_draw","text":"","code":"n_draw(x)  # S3 method for rvec n_draw(x)"},{"path":"https://bayesiandemography.github.io/rvec/reference/n_draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of draws in a random sample — n_draw","text":"x object holding random sample.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/n_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of draws in a random sample — n_draw","text":"count, NULL, vector sampled elements.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/n_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of draws in a random sample — n_draw","text":"","code":"m <- matrix(1:40, nrow = 4, ncol = 10) x <- rvec(m) n_draw(x) #> [1] 10"},{"path":"https://bayesiandemography.github.io/rvec/reference/reg_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior sample from linear regression — reg_post","title":"Posterior sample from linear regression — reg_post","text":"Posterior sample parameters linear regression model.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/reg_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior sample from linear regression — reg_post","text":"","code":"reg_post"},{"path":"https://bayesiandemography.github.io/rvec/reference/reg_post.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Posterior sample from linear regression — reg_post","text":"matrix 200 columns following rows: alpha: Intercept parameter beta: Slope parameter sigma: Standard deviation error term","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/reg_post.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Posterior sample from linear regression — reg_post","text":"reg_post contains values second half line dataset package coda. line dataset draws BUGS manual: Spiegelhalter, D.J., Thomas, ., Best, N.G. Gilks, W.R. (1995) BUGS: Bayesian inference using Gibbs Sampling, Version 0.5, MRC Biostatistics Unit, Cambridge.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability distributions — rvec-distributions","title":"Probability distributions — rvec-distributions","text":"Modified versions standard probability functions can accommodate rvecs. arguments functions rvecs, functions return rvecs; otherwise return ordinary R vectors,","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability distributions — rvec-distributions","text":"","code":"dbeta_rvec(x, shape1, shape2, ncp = 0, log = FALSE)  pbeta_rvec(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)  qbeta_rvec(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)  rbeta_rvec(n, shape1, shape2, ncp = 0, n_draw = NULL)  dbinom_rvec(x, size, prob, log = FALSE)  pbinom_rvec(q, size, prob, lower.tail = TRUE, log.p = FALSE)  qbinom_rvec(p, size, prob, lower.tail = TRUE, log.p = FALSE)  rbinom_rvec(n, size, prob, n_draw = NULL)  dcauchy_rvec(x, location = 0, scale = 1, log = FALSE)  pcauchy_rvec(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  qcauchy_rvec(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)  rcauchy_rvec(n, location = 0, scale = 1, n_draw = NULL)  dchisq_rvec(x, df, ncp = 0, log = FALSE)  pchisq_rvec(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  qchisq_rvec(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  rchisq_rvec(n, df, ncp = 0, n_draw = NULL)  dexp_rvec(x, rate = 1, log = FALSE)  pexp_rvec(q, rate = 1, lower.tail = TRUE, log.p = FALSE)  qexp_rvec(p, rate = 1, lower.tail = TRUE, log.p = FALSE)  rexp_rvec(n, rate = 1, n_draw = NULL)  df_rvec(x, df1, df2, ncp = 0, log = FALSE)  pf_rvec(q, df1, df2, ncp = 0, lower.tail = TRUE, log.p = FALSE)  qf_rvec(p, df1, df2, ncp = 0, lower.tail = TRUE, log.p = FALSE)  rf_rvec(n, df1, df2, ncp = 0, n_draw = NULL)  dgamma_rvec(x, shape, rate = 1, scale = 1/rate, log = FALSE)  pgamma_rvec(   q,   shape,   rate = 1,   scale = 1/rate,   lower.tail = TRUE,   log.p = FALSE )  qgamma_rvec(   p,   shape,   rate = 1,   scale = 1/rate,   lower.tail = TRUE,   log.p = FALSE )  rgamma_rvec(n, shape, rate = 1, scale = 1/rate, n_draw = NULL)  dgeom_rvec(x, prob, log = FALSE)  pgeom_rvec(q, prob, lower.tail = TRUE, log.p = FALSE)  qgeom_rvec(p, prob, lower.tail = TRUE, log.p = FALSE)  rgeom_rvec(n, prob, n_draw = NULL)  dhyper_rvec(x, m, n, k, log = FALSE)  phyper_rvec(q, m, n, k, lower.tail = TRUE, log.p = FALSE)  qhyper_rvec(p, m, n, k, lower.tail = TRUE, log.p = FALSE)  rhyper_rvec(nn, m, n, k, n_draw = NULL)  dlnorm_rvec(x, meanlog = 0, sdlog = 1, log = FALSE)  plnorm_rvec(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)  qlnorm_rvec(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)  rlnorm_rvec(n, meanlog = 0, sdlog = 1, n_draw = NULL)  dmultinom_rvec(x, size = NULL, prob, log = FALSE)  rmultinom_rvec(n, size, prob, n_draw = NULL)  dnbinom_rvec(x, size, prob, mu, log = FALSE)  pnbinom_rvec(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)  qnbinom_rvec(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)  rnbinom_rvec(n, size, prob, mu, n_draw = NULL)  dnorm_rvec(x, mean = 0, sd = 1, log = FALSE)  pnorm_rvec(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)  qnorm_rvec(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)  rnorm_rvec(n, mean = 0, sd = 1, n_draw = NULL)  dpois_rvec(x, lambda, log = FALSE)  ppois_rvec(q, lambda, lower.tail = TRUE, log.p = FALSE)  qpois_rvec(p, lambda, lower.tail = TRUE, log.p = FALSE)  rpois_rvec(n, lambda, n_draw = NULL)  dt_rvec(x, df, ncp = 0, log = FALSE)  pt_rvec(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  qt_rvec(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)  rt_rvec(n, df, ncp = 0, n_draw = NULL)  dunif_rvec(x, min = 0, max = 1, log = FALSE)  punif_rvec(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)  qunif_rvec(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)  runif_rvec(n, min = 0, max = 1, n_draw = NULL)  dweibull_rvec(x, shape, scale = 1, log = FALSE)  pweibull_rvec(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)  qweibull_rvec(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)  rweibull_rvec(n, shape, scale = 1, n_draw = NULL)"},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability distributions — rvec-distributions","text":"x Quantiles. Can rvec. shape1, shape2 Parameters beta distribution. Non-negative. See stats::dbeta(). Can rvecs. ncp Non-centrality parameter. Default 0. See stats::dbeta(), stats::dchisq(), stats::df(), stats::dt(). rvec. log, log.p Whether return log(p) rather p. Default FALSE. Can rvec. q Quantiles. Can rvec. lower.tail Whether return \\(P[X \\le x]\\), opposed \\(P[X > x]\\). Default TRUE. rvec. p Probabilities. Can rvec. n functions rhyper_rvec(), n length random vector created, rvec. rhyper_rvec(), n number black balls urn, can rvec. See stats::rhyper(). n_draw Number random draws, per observation, random vector created. Optional. rvec. size Number trials. See stats::dbinom(), stats::dmultinom(), stats::dnbinom(). Can rvec. prob Probability success trial. See stats::dgeom(), stats::dnbinom(). Can rvec. location Parameter Cauchy distribution. Default 0. See stats::dcauchy(). Can rvec. scale Parameter Cauchy distribution. Default 1. See stats::dcauchy(). Can rvec. df, df1, df2 Degrees freedom. See stats::dchisq(), stats::df(), stats::dt(). Can rvec. rate Rates. See stats::dexp(), stats::dgamma(). Can rvec. shape Parameter gamma distribution. See stats::dgamma(), stats::dweibull(). Can rvec. m number white balls urn. See stats::dhyper(). Can rvec. k Number balls drawn urn. See stats::dhyper(). Can rvec. nn length random vector created, call rhyper_rvec(). equivalent n random variate functions. See stats::rhyper(). rvec. meanlog Mean distribution, log scale. Default 0. See stats::dlnorm(). Can rvec. sdlog Standard deviation distribution, log scale. Default 1. See stats::dlnorm(). Can rvec. mu Mean negative binomial distribution. See stats::dnbinom(). Can rvec. mean Mean distribution. Default 0.  See stats::dlnorm(). Can rvec. sd Standard deviation. Default 1. See stats::dnorm(). Can rvec. lambda Vector means. See stats::rpois() Can rvec. min, max Lower upper limits uniform distribution. Defaults 0 1.  See stats::dunif(). Can rvec.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability distributions — rvec-distributions","text":"arguments rvecs, value n_draw supplied, rvec; otherwise ordinary R vector.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"creating-an-rvec-by-supplying-a-value-for-n-draw","dir":"Reference","previous_headings":"","what":"Creating an rvec by supplying a value for n_draw","title":"Probability distributions — rvec-distributions","text":"r*_rvec functions generating random variates include one argument present base R functions: n_draw. value n_draw supplied, return value always rvec, even none inputs rvecs. convenient way create rvec use simulation. See example.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"recycling","dir":"Reference","previous_headings":"","what":"Recycling","title":"Probability distributions — rvec-distributions","text":"Unlike base R distribution functions, rvec functions use tidyverse vector recycling rules: Vectors length 1 recycled vectors must size rules restrictive base R rules, also predictable. Base R style recycling can done explicit calls base::rep(), base::rep_len(), base::rep.int(), methods rvecs.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"multinomial","dir":"Reference","previous_headings":"","what":"Multinomial","title":"Probability distributions — rvec-distributions","text":"multinomial distribution distribution described  multivariate outcome. Base R rvec multinomial distribution functions behave differently distribution functions:","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability distributions — rvec-distributions","text":"","code":"x_rv <- rvec(list(c(-0.8, 1.3),                   c(-9.1, 8.7))) mean_rv <- rvec(list(c(-1, 1),                      c(-10, 10))) sd_rv <- rvec(list(c(0.2, 20))) x_rv #> <rvec_dbl<2>[2]> #> [1] -0.8,1.3 -9.1,8.7 mean_rv #> <rvec_dbl<2>[2]> #> [1] -1,1   -10,10 sd_rv #> <rvec_dbl<2>[1]> #> [1] 0.2,20  ## densities: all arguments rvecs dnorm_rvec(x = x_rv, mean = mean_rv, sd = sd_rv) #> <rvec_dbl<2>[2]> #> [1] 1.21,0.01994       0.00007992,0.01991  ## densities: 'x' is ordinary vector dnorm_rvec(x = c(0, 2), mean = mean_rv, sd = sd_rv) #> <rvec_dbl<2>[2]> #> [1] 0.000007434,0.01992 0,0.01841            ## ...which is equivalent to c(dnorm_rvec(0, mean = mean_rv[1], sd = sd_rv),   dnorm_rvec(2, mean = mean_rv[2], sd = sd_rv)) #> <rvec_dbl<2>[2]> #> [1] 0.000007434,0.01992 0,0.01841            ## random variates: mean is rvec, sd is rvec rnorm_rvec(n = 2, mean = mean_rv, sd = sd_rv) #> <rvec_dbl<2>[2]> #> [1] -1.025,14.48 -9.707,49.13  ## random variates: mean is rvec, sd is scalar rnorm_rvec(n = 2, mean = mean_rv, sd = 0.5) #> <rvec_dbl<2>[2]> #> [1] -1.135,0.8021 -10.62,10.05   ## create rvecs via the 'n_draw' argument, ## and use to created a simulated 'y' mu <- rnorm_rvec(n = 3,                  mean = 2,                  sd = 0.5,                  n_draw = 1000) sigma <- rgamma_rvec(n = 3,                      shape = 1,                      scale = 0.5,                      n_draw = 1000) y <- rnorm_rvec(n = 3,                 mean = mu,                 sd = sigma) y #> <rvec_dbl<1000>[3]> #> [1] 2 (0.11, 3.5) 2 (0.13, 3.6) 2 (0.29, 3.5)  ## multinomial distribution size <- rvec(list(10:12)) prob <- c(0.1, 0.4, 0.2, 0.3) x <- rmultinom_rvec(n = 1, size = size, prob = prob) x #> <rvec_int<3>[4]> #> [1] 1,0,0 1,5,6 2,0,2 6,6,4 sum(x) #> <rvec_int<3>[1]> #> [1] 10,11,12"},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Package 'rvec' — rvec-package","title":"Package 'rvec' — rvec-package","text":"Tools working random draws distribution, eg draws posterior distribution Bayesian analysis.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package 'rvec' — rvec-package","text":"rvec holds multiple draws, wherever possible behaves like ordinary R vector. instance, x rvec holding 1000 draws distribution, 2 * x returns new rvec draw multiplied 2. summarise across draws, use function starting draws. instance, calculate credible interval, use draws_ci().","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-package.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package 'rvec' — rvec-package","text":"Creating rvecs rvec() - class depends input rvec_dbl() - doubles rvec_int() - integers rvec_lgl() - logical rvec_chr() - character collapse_to_rvec() - data data frame Manipulating rvecs if_else_rvec() map_rvec() Probability distributions dbeta_rvec() dbinom_rvec() dcauchy_rvec() dchisq_rvec() dexp_rvec() df_rvec() dgamma_rvec() dgeom_rvec() dhyper_rvec() dlnorm_rvec() dmultinom() dnbinom_rvec() dnorm_rvec() dpois_rvec() dt_rvec() dunif_rvec() dweibull_rvec() Summarizing across draws draws_all() draws_any() draws_median() draws_mean() draws_mode() draws_ci() draws_quantile() draws_fun() n_draw() Coercion, classes as_list_col() expand_from_rvec() is_rvec() Weighted summaries weighted_mad() weighted_mean() weighted_median() weighted_sd() weighted_var() Datasets divorce() reg_post()","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-package.html","id":"packages-with-similar-functionality","dir":"Reference","previous_headings":"","what":"Packages with similar functionality","title":"Package 'rvec' — rvec-package","text":"rv posterior","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Package 'rvec' — rvec-package","text":"Maintainer: John Bryant john@bayesiandemography.com contributors: Bayesian Demography Limited [copyright holder]","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an rvec — rvec","title":"Create an rvec — rvec","text":"Create object class \"rvec\".","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an rvec — rvec","text":"","code":"rvec(x)  rvec_chr(x = NULL)  rvec_dbl(x = NULL)  rvec_int(x = NULL)  rvec_lgl(x = NULL)"},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an rvec — rvec","text":"x matrix, list vectors, atomic vector.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an rvec — rvec","text":"rvec following class: rvec_dbl(): \"rvec_dbl\" rvec_int(): \"rvec_int\" rvec_lgl(): \"rvec_lgl\" rvec_chr(): \"rvec_chr\" rvec(): \"rvec_chr\", \"rvec_dbl\" \"rvec_int\", \"rvec_lgl\", depending typeof(x).","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an rvec — rvec","text":"Class \"rvec\" four subclasses, dealing diffent type: \"rvec_dbl\" doubles \"rvec_int\" integers \"rvec_lgl\" logical \"rvec_chr\" character subclasses analogous double(), integer(), logical(), character() vectors. Function rvec() chooses subclass, based x. Functions rvec_dbl(), rvec_int(), rvec_lgl(), rvec_chr() create objects particular subclass. x can matrix, row set draws unknown quantity. list, element set draws. atomic vector, treated single-column matrix.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/rvec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an rvec — rvec","text":"","code":"m <- rbind(c(-1.5, 2, 0.2),            c(-2.3, 3, 1.2)) rvec_dbl(m) #> <rvec_dbl<3>[2]> #> [1] -1.5,2,0.2 -2.3,3,1.2  l <- list(rpois(100, lambda = 10.2),           rpois(100, lambda = 5.5)) rvec(l) #> <rvec_int<100>[2]> #> [1] 10 (5, 16)  5 (1.5, 10)  rvec(letters[1:5]) #> <rvec_chr<1>[5]> #> [1] \"a\" \"b\" \"c\" \"d\" \"e\"  l <- list(a = c(TRUE, FALSE),           b = c(FALSE, TRUE)) rvec(l) #> <rvec_lgl<2>[2]> #>   a   b  #> T,F F,T"},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted summaries — weighted_mean","title":"Calculate weighted summaries — weighted_mean","text":"Calculate weighted means medians MADs (mean absolute deviations) variances standard deviations. Works ordinary vectors, rvecs.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted summaries — weighted_mean","text":"","code":"weighted_mean(x, wt = NULL, na_rm = FALSE)  # S3 method for default weighted_mean(x, wt = NULL, na_rm = FALSE)  # S3 method for rvec weighted_mean(x, wt = NULL, na_rm = FALSE)  weighted_mad(x, wt = NULL, na_rm = FALSE)  # S3 method for default weighted_mad(x, wt = NULL, na_rm = FALSE)  # S3 method for rvec weighted_mad(x, wt = NULL, na_rm = FALSE)  weighted_median(x, wt = NULL, na_rm = FALSE)  # S3 method for default weighted_median(x, wt = NULL, na_rm = FALSE)  # S3 method for rvec weighted_median(x, wt = NULL, na_rm = FALSE)  weighted_sd(x, wt = NULL, na_rm = FALSE)  # S3 method for default weighted_sd(x, wt = NULL, na_rm = FALSE)  # S3 method for rvec weighted_sd(x, wt = NULL, na_rm = FALSE)  weighted_var(x, wt = NULL, na_rm = FALSE)  # S3 method for default weighted_var(x, wt = NULL, na_rm = FALSE)  # S3 method for rvec weighted_var(x, wt = NULL, na_rm = FALSE)"},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted summaries — weighted_mean","text":"x Quantity summarised. ordinary vector rvec. wt Weights. ordinary vector, rvec, NULL (default.) NULL, unweighted summary returned. na_rm Whether remove NAs x wt calculating. Default FALSE. See matrixStats::weightedMean() description algorithm used.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weighted summaries — weighted_mean","text":"x wt rvec, rvec length 1. Otherwise, scalar.","code":""},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate weighted summaries — weighted_mean","text":"x wt must length. Internally calculations done matrixStats functions matrixStats::weightedMean() matrixStats::colWeightedMeans().","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/reference/weighted_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weighted summaries — weighted_mean","text":"","code":"## 'x' is rvec, 'wt' is ordinary vector v <- rvec(list(c(1, 11),                c(2, 12),                c(7, 17))) weights <- c(40, 80, 72) weighted_mean(v, wt = weights) #> <rvec_dbl<2>[1]> #> [1] 3.667,13.67  ## 'x' is ordinary vector, 'wt' is rvec y <- c(1, 2, 3) w <- rvec(list(c(100, 200),                c(210, 889),                c(200, 200))) weighted_mean(y, wt = w) #> <rvec_dbl<2>[1]> #> [1] 2.196,2 weighted_mean(y, wt = w, na_rm = TRUE) #> <rvec_dbl<2>[1]> #> [1] 2.196,2"},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/news/index.html","id":"bug-fix-0-0-2","dir":"Changelog","previous_headings":"","what":"Bug fix","title":"rvec 0.0.2","text":"Added drop = FALSE argument calls matrixStats::rowQuantiles()","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/rvec/news/index.html","id":"minor-feature-added-0-0-1","dir":"Changelog","previous_headings":"","what":"Minor feature added","title":"rvec 0.0.1","text":"Added method .numeric(). (Can’t add methods .character(), .double(), .integer(), .logical(), since non-generic primitives.","code":""}]
