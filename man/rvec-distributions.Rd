% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distributions.R
\name{rvec-distributions}
\alias{rvec-distributions}
\alias{dbeta_rvec}
\alias{pbeta_rvec}
\alias{qbeta_rvec}
\alias{rbeta_rvec}
\alias{dbinom_rvec}
\alias{pbinom_rvec}
\alias{qbinom_rvec}
\alias{rbinom_rvec}
\alias{dcauchy_rvec}
\alias{pcauchy_rvec}
\alias{qcauchy_rvec}
\alias{rcauchy_rvec}
\alias{dchisq_rvec}
\alias{pchisq_rvec}
\alias{qchisq_rvec}
\alias{rchisq_rvec}
\alias{dexp_rvec}
\alias{pexp_rvec}
\alias{qexp_rvec}
\alias{rexp_rvec}
\alias{df_rvec}
\alias{pf_rvec}
\alias{qf_rvec}
\alias{rf_rvec}
\alias{dgamma_rvec}
\alias{pgamma_rvec}
\alias{qgamma_rvec}
\alias{rgamma_rvec}
\alias{dgeom_rvec}
\alias{pgeom_rvec}
\alias{qgeom_rvec}
\alias{rgeom_rvec}
\alias{dhyper_rvec}
\alias{phyper_rvec}
\alias{qhyper_rvec}
\alias{rhyper_rvec}
\alias{dlnorm_rvec}
\alias{plnorm_rvec}
\alias{qlnorm_rvec}
\alias{rlnorm_rvec}
\alias{dmultinom_rvec}
\alias{rmultinom_rvec}
\alias{dnbinom_rvec}
\alias{pnbinom_rvec}
\alias{qnbinom_rvec}
\alias{rnbinom_rvec}
\alias{dnorm_rvec}
\alias{pnorm_rvec}
\alias{qnorm_rvec}
\alias{rnorm_rvec}
\alias{dpois_rvec}
\alias{ppois_rvec}
\alias{qpois_rvec}
\alias{rpois_rvec}
\alias{dt_rvec}
\alias{pt_rvec}
\alias{qt_rvec}
\alias{rt_rvec}
\alias{dunif_rvec}
\alias{punif_rvec}
\alias{qunif_rvec}
\alias{runif_rvec}
\alias{dweibull_rvec}
\alias{pweibull_rvec}
\alias{qweibull_rvec}
\alias{rweibull_rvec}
\title{Probability distributions}
\usage{
dbeta_rvec(x, shape1, shape2, ncp = 0, log = FALSE)

pbeta_rvec(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)

qbeta_rvec(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)

rbeta_rvec(n, shape1, shape2, ncp = 0, n_draw = NULL)

dbinom_rvec(x, size, prob, log = FALSE)

pbinom_rvec(q, size, prob, lower.tail = TRUE, log.p = FALSE)

qbinom_rvec(p, size, prob, lower.tail = TRUE, log.p = FALSE)

rbinom_rvec(n, size, prob, n_draw = NULL)

dcauchy_rvec(x, location = 0, scale = 1, log = FALSE)

pcauchy_rvec(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)

qcauchy_rvec(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)

rcauchy_rvec(n, location = 0, scale = 1, n_draw = NULL)

dchisq_rvec(x, df, ncp = 0, log = FALSE)

pchisq_rvec(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)

qchisq_rvec(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)

rchisq_rvec(n, df, ncp = 0, n_draw = NULL)

dexp_rvec(x, rate = 1, log = FALSE)

pexp_rvec(q, rate = 1, lower.tail = TRUE, log.p = FALSE)

qexp_rvec(p, rate = 1, lower.tail = TRUE, log.p = FALSE)

rexp_rvec(n, rate = 1, n_draw = NULL)

df_rvec(x, df1, df2, ncp = 0, log = FALSE)

pf_rvec(q, df1, df2, ncp = 0, lower.tail = TRUE, log.p = FALSE)

qf_rvec(p, df1, df2, ncp = 0, lower.tail = TRUE, log.p = FALSE)

rf_rvec(n, df1, df2, ncp = 0, n_draw = NULL)

dgamma_rvec(x, shape, rate = 1, scale = 1/rate, log = FALSE)

pgamma_rvec(
  q,
  shape,
  rate = 1,
  scale = 1/rate,
  lower.tail = TRUE,
  log.p = FALSE
)

qgamma_rvec(
  p,
  shape,
  rate = 1,
  scale = 1/rate,
  lower.tail = TRUE,
  log.p = FALSE
)

rgamma_rvec(n, shape, rate = 1, scale = 1/rate, n_draw = NULL)

dgeom_rvec(x, prob, log = FALSE)

pgeom_rvec(q, prob, lower.tail = TRUE, log.p = FALSE)

qgeom_rvec(p, prob, lower.tail = TRUE, log.p = FALSE)

rgeom_rvec(n, prob, n_draw = NULL)

dhyper_rvec(x, m, n, k, log = FALSE)

phyper_rvec(q, m, n, k, lower.tail = TRUE, log.p = FALSE)

qhyper_rvec(p, m, n, k, lower.tail = TRUE, log.p = FALSE)

rhyper_rvec(nn, m, n, k, n_draw = NULL)

dlnorm_rvec(x, meanlog = 0, sdlog = 1, log = FALSE)

plnorm_rvec(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)

qlnorm_rvec(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)

rlnorm_rvec(n, meanlog = 0, sdlog = 1, n_draw = NULL)

dmultinom_rvec(x, size = NULL, prob, log = FALSE)

rmultinom_rvec(n, size, prob, n_draw = NULL)

dnbinom_rvec(x, size, prob, mu, log = FALSE)

pnbinom_rvec(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)

qnbinom_rvec(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)

rnbinom_rvec(n, size, prob, mu, n_draw = NULL)

dnorm_rvec(x, mean = 0, sd = 1, log = FALSE)

pnorm_rvec(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)

qnorm_rvec(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)

rnorm_rvec(n, mean = 0, sd = 1, n_draw = NULL)

dpois_rvec(x, lambda, log = FALSE)

ppois_rvec(q, lambda, lower.tail = TRUE, log.p = FALSE)

qpois_rvec(p, lambda, lower.tail = TRUE, log.p = FALSE)

rpois_rvec(n, lambda, n_draw = NULL)

dt_rvec(x, df, ncp = 0, log = FALSE)

pt_rvec(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)

qt_rvec(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)

rt_rvec(n, df, ncp = 0, n_draw = NULL)

dunif_rvec(x, min = 0, max = 1, log = FALSE)

punif_rvec(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)

qunif_rvec(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)

runif_rvec(n, min = 0, max = 1, n_draw = NULL)

dweibull_rvec(x, shape, scale = 1, log = FALSE)

pweibull_rvec(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)

qweibull_rvec(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)

rweibull_rvec(n, shape, scale = 1, n_draw = NULL)
}
\arguments{
\item{x}{Quantiles. Can be rvec.}

\item{shape1, shape2}{Parameters
for beta distribution. Non-negative.
See \code{\link[stats:Beta]{stats::dbeta()}}. Can be rvecs.}

\item{ncp}{Non-centrality parameter.
Default is \code{0}. See \code{\link[stats:Beta]{stats::dbeta()}},
\code{\link[stats:Chisquare]{stats::dchisq()}}, \code{\link[stats:Fdist]{stats::df()}},
\code{\link[stats:TDist]{stats::dt()}}. Cannot be rvec.}

\item{log, log.p}{Whether to return
\code{log(p)} rather than \code{p}. Default is
\code{FALSE}. Can be rvec.}

\item{q}{Quantiles. Can be rvec.}

\item{lower.tail}{Whether to return
\eqn{P[X \le x]}, as opposed to
\eqn{P[X > x]}. Default is \code{TRUE}.
Cannot be rvec.}

\item{p}{Probabilities. Can be rvec.}

\item{n}{\itemize{
\item In functions other than \code{rhyper_rvec()}, \code{n} is the
length of random vector being created, and cannot be
an rvec.
\item In \code{rhyper_rvec()}, \code{n} is the number of black balls
in the urn, and can be an rvec. See \code{\link[stats:Hypergeometric]{stats::rhyper()}}.
}}

\item{n_draw}{Number of random draws, per observation,
in random vector being created.
Optional. Cannot be rvec.}

\item{size}{Number of trials.
See \code{\link[stats:Binomial]{stats::dbinom()}}, \code{\link[stats:Multinom]{stats::dmultinom()}},
\code{\link[stats:NegBinomial]{stats::dnbinom()}}. Can be rvec.}

\item{prob}{Probability of
success in each trial.
See \code{\link[stats:Geometric]{stats::dgeom()}}, \code{\link[stats:NegBinomial]{stats::dnbinom()}}.
Can be rvec.}

\item{location}{Parameter for Cauchy distribution.
Default is \code{0}. See \code{\link[stats:Cauchy]{stats::dcauchy()}}. Can be rvec.}

\item{scale}{Parameter
for Cauchy distribution. Default is \code{1}.
See \code{\link[stats:Cauchy]{stats::dcauchy()}}. Can be rvec.}

\item{df, df1, df2}{Degrees of freedom.
See \code{\link[stats:Chisquare]{stats::dchisq()}}, \code{\link[stats:Fdist]{stats::df()}}, \code{\link[stats:TDist]{stats::dt()}}.
Can be rvec.}

\item{rate}{Rates. See \code{\link[stats:Exponential]{stats::dexp()}},
\code{\link[stats:GammaDist]{stats::dgamma()}}. Can be rvec.}

\item{shape}{Parameter for gamma distribution.
See \code{\link[stats:GammaDist]{stats::dgamma()}}, \code{\link[stats:Weibull]{stats::dweibull()}}.
Can be rvec.}

\item{m}{The number of white balls in the urn.
See \code{\link[stats:Hypergeometric]{stats::dhyper()}}. Can be rvec.}

\item{k}{Number of balls drawn from urn.
See \code{\link[stats:Hypergeometric]{stats::dhyper()}}. Can be rvec.}

\item{nn}{The length of the random vector being created,
in a call to \code{rhyper_rvec()}. The equivalent of \code{n} in
other random variate functions.
See \code{\link[stats:Hypergeometric]{stats::rhyper()}}. Cannot be an rvec.}

\item{meanlog}{Mean of distribution, on log scale.
Default is \code{0}. See \code{\link[stats:Lognormal]{stats::dlnorm()}}.
Can be rvec.}

\item{sdlog}{Standard deviation of distribution,
on log scale.
Default is \code{1}. See \code{\link[stats:Lognormal]{stats::dlnorm()}}.
Can be rvec.}

\item{mu}{Mean for negative binomial distribution.
See \code{\link[stats:NegBinomial]{stats::dnbinom()}}. Can be rvec.}

\item{mean}{Mean of distribution.
Default is \code{0}.  See \code{\link[stats:Lognormal]{stats::dlnorm()}}.
Can be rvec.}

\item{sd}{Standard deviation.
Default is \code{1}. See \code{\link[stats:Normal]{stats::dnorm()}}.
Can be rvec.}

\item{lambda}{Vector of means.
See \code{\link[stats:Poisson]{stats::rpois()}} Can be rvec.}

\item{min, max}{Lower and upper limits of
the uniform distribution. Defaults are
\code{0} and \code{1}.  See \code{\link[stats:Uniform]{stats::dunif()}}.
Can be rvec.}
}
\value{
If any of the arguments are rvecs,
or if a value for \code{n_draw} is supplied,
then an \link[=rvec]{rvec}; otherwise an ordinary R vector.
}
\description{
Modified versions of standard probability
functions that can accommodate rvecs.
If any of arguments to the functions are
rvecs, then the functions return rvecs;
otherwise they return ordinary R vectors,
}
\section{Creating an rvec by supplying a value for n_draw}{


The \verb{r*_rvec} functions for generating random variates
include one argument that is not present in
base R functions: \code{n_draw}. If a value for \code{n_draw}
is supplied, then the return value is always an
rvec, even if none of the inputs are rvecs.
This is a convenient way to create
an rvec to use in a simulation. See below for an example.
}

\section{Recycling}{


Unlike the base R distribution functions,
the rvec functions use \link[vctrs:vector_recycling_rules]{tidyverse}
vector recycling rules:
\itemize{
\item Vectors of length 1 are recycled
\item All other vectors must have the same size
}

These rules are more restrictive than base R rules,
but are also more predictable. Base R style
recycling can be done through explicit
calls to \code{\link[base:rep]{base::rep()}},
\code{\link[base:rep]{base::rep_len()}}, and \code{\link[base:rep]{base::rep.int()}},
all of which have methods for \link[=rvec]{rvecs}.
}

\section{Multinomial}{


The multinomial distribution is the only
distribution described here that  has a
multivariate outcome. Base R and rvec
multinomial distribution functions both
behave differently from other distribution
functions:\tabular{ll}{
   Base R \tab rvec \cr
   No \verb{pmultinom() or }qmultinom()` \tab No \verb{pmultinom_rvec() or }qmultinom_rvec()` \cr
   No recycling of arguments \tab No recycling of arguments \cr
   \code{rmultinom()} returns matrix \tab \code{rmultinom_rvec()} returns list if \code{n > 1} \cr
}
}

\examples{
x_rv <- rvec(list(c(-0.8, 1.3),
                  c(-9.1, 8.7)))
mean_rv <- rvec(list(c(-1, 1),
                     c(-10, 10)))
sd_rv <- rvec(list(c(0.2, 20)))
x_rv
mean_rv
sd_rv

## densities: all arguments rvecs
dnorm_rvec(x = x_rv, mean = mean_rv, sd = sd_rv)

## densities: 'x' is ordinary vector
dnorm_rvec(x = c(0, 2), mean = mean_rv, sd = sd_rv)

## ...which is equivalent to
c(dnorm_rvec(0, mean = mean_rv[1], sd = sd_rv),
  dnorm_rvec(2, mean = mean_rv[2], sd = sd_rv))

## random variates: mean is rvec, sd is rvec
rnorm_rvec(n = 2, mean = mean_rv, sd = sd_rv)

## random variates: mean is rvec, sd is scalar
rnorm_rvec(n = 2, mean = mean_rv, sd = 0.5)

## create rvecs via the 'n_draw' argument,
## and use to created a simulated 'y'
mu <- rnorm_rvec(n = 3,
                 mean = 2,
                 sd = 0.5,
                 n_draw = 1000)
sigma <- rgamma_rvec(n = 3,
                     shape = 1,
                     scale = 0.5,
                     n_draw = 1000)
y <- rnorm_rvec(n = 3,
                mean = mu,
                sd = sigma)
y

## multinomial distribution
size <- rvec(list(10:12))
prob <- c(0.1, 0.4, 0.2, 0.3)
x <- rmultinom_rvec(n = 1, size = size, prob = prob)
x
sum(x)
}
\seealso{
\itemize{
\item Equivalent functions in base R: \link[stats:Distributions]{stats::distributions}.
}
}
