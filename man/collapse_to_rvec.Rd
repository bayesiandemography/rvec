% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collapse_to_rvec.R
\name{collapse_to_rvec}
\alias{collapse_to_rvec}
\alias{collapse_to_rvec.data.frame}
\alias{collapse_to_rvec.grouped_df}
\alias{expand_from_rvec}
\alias{expand_from_rvec.data.frame}
\alias{expand_from_rvec.grouped_df}
\title{Convert a data frame between 'database'
and 'rvec' formats}
\usage{
collapse_to_rvec(data, draw = draw, values = value, type = NULL)

\method{collapse_to_rvec}{data.frame}(data, draw = draw, values = value, type = NULL)

\method{collapse_to_rvec}{grouped_df}(data, draw = draw, values = value, type = NULL)

expand_from_rvec(data, draw = draw)

\method{expand_from_rvec}{data.frame}(data, draw = draw)

\method{expand_from_rvec}{grouped_df}(data, draw = draw)
}
\arguments{
\item{data}{A data frame, possibly
\href{https://dplyr.tidyverse.org/reference/group_data.html}{grouped}.}

\item{draw}{<\code{\link[tidyselect:language]{tidyselect}}>
The column that uniquely identifies random draws
within each combination of ID variables.}

\item{values}{<\code{\link[tidyselect:language]{tidyselect}}>
One or more columns of \code{data} that hold measurements.}

\item{type}{A string, each letter of which
represents an rvec constructor function. Optional.}
}
\value{
A data frame.
\itemize{
\item \code{collapse_to_rvec()} \strong{reduces} the number of rows
by a factor of \code{\link[=n_draw]{n_draw()}}.
\item \code{expand_from_rvec()} \strong{increases} the number of rows
by a factor of \code{\link[=n_draw]{n_draw()}}.
\item If \code{data} is a
\href{https://dplyr.tidyverse.org/reference/group_data.html}{grouped}
data frame, then \code{collapse_to_rvec()} and
\code{expand_from_rvec()} silently drop all columns
that are not specified by \code{draw} or \code{value}
and that are not grouping columns.
}
}
\description{
\code{collapse_to_rvec()} converts a data frame from
a 'database' format to an 'rvec' format.
\code{expand_from_rvec()} converts a data frame
from an rvecs format to a database format.
}
\details{
In database format, each row represents
one random draw. The data frame contains
a 'draw' column that distinguishes different
draws within the same combination
of ID variables. In rvec format,
each row represents one
combination of ID variables, and
multiple draws are stored in an \link[=rvec]{rvec}.
See below for examples.
}
\section{Data frame columns}{


\code{collapse_to_rvec()} and \code{expand_from_rvec()}
operate with three kinds of columns:
\itemize{
\item Values columns, holding hold measurements
of some random or uncertain quantity.
In \code{collapse_to_rvec()},
values columns are specified by the
\code{values} argument. \code{expand_from_rvec()}
treats all rvecs as value columns.
\item The draw column, used to uniquely identify
each draw in a database format, within
each combination of ID values. Specified
by the \code{draw} argument.
\item ID columns, which hold covariates or
classification variables.
- In an ordinary data frame,
\code{collapse_to_rvec()} and \code{expand_from_rvec()}
assume that all columns that are not
values or draw columns are ID columns.
- In a
\href{https://dplyr.tidyverse.org/reference/group_data.html}{grouped}
data frame, \code{collapse_to_rvec()} and \code{expand_from_rvec()}
assume that all \emph{grouping} columns
that are not values or draw columns are
ID columns.
}
}

\section{\code{type} argument}{


By default, \code{collapse_to_rvec()} calls function
\code{\link[=rvec]{rvec()}} on each values column in \code{data}.
\code{\link[=rvec]{rvec()}} chooses between \verb{rvec_chr, }rvec_dbl\verb{, }rvec_int\verb{,and  }rvec_lgl`, based
on the contents of each values column.

Instead of leaving the decision to \code{\link[=rvec]{rvec()}},
the choice of rvec class can be specified
in advance, using the \code{type} argument.
\code{type} is a string, with the number of
characters equal to the number of values columns.
The characters have the following interpretations:
\itemize{
\item \code{"c"}: \code{rvec_chr}
\item \code{"d"}: \code{rvec_dbl}
\item \code{"i"}: \code{rvec_int}
\item \code{"l"}: \code{rvec_lgl}
\item \code{"?"}: Depends on inputs.
}

These codes are modified from codes used by the
\href{https://readr.tidyverse.org}{readr} package.
}

\examples{
data_db <- tibble::tribble(
  ~occupation,    ~sim, ~pay,
  "Statistician", 1,    100,
  "Statistician", 2,    80,
  "Statistician", 3,    105,
  "Banker",       1,    400,
  "Banker",       2,    350,
  "Banker",       3,    420
)

## database format to rvec format
data_rv <- data_db \%>\%
  collapse_to_rvecs(draw = sim,
                    values = pay)
data_rv

## rvec format to database format
data_rv \%>\%
  expand_from_rvecs()

## provide a name for the draw columnnn
data_rv \%>\%
  expand_from_rvecs(draw = "sim")

## specify that rvec column
## must be rvec_int
data_rv <- data_db \%>\%
  collapse_to_rvecs(draw = sim,
                    values = pay,
                    type = "i")

## if we add add a redundant column.
## then our earlier call no longer works
data_db2 <- data_db \%>\%
  mutate(newcol = "pointless")
try(
  data_db2 \%>\%
    collapse_to_rvec(draw = sim,
                     values = pay)
)

## one solution: use 'group_by' to
## specify the ID columns
data_db2 \%>\%
  group_by(occupation) \%>\%
  collapse_to_rvec(draw = sim,
                   values = pay)
}
\seealso{
\itemize{
\item \code{\link[=rvec]{rvec()}} to construct a single \code{rvec}.
\item \code{\link[=as_list_col]{as_list_col()}} to convert an \code{rvec}
to a list column.
\item \href{https://dplyr.tidyverse.org/reference/group_data.html}{dplyr::group_vars()}
gives the names of the grouping variables
in a grouped data frame.
}

\code{collapse_to_rvec()} and \code{expand_from_rvec()}
are reminiscent of
\href{https://tidyr.tidyverse.org/reference/nest.html}{tidyr::nest()}
and
\href{https://tidyr.tidyverse.org/reference/unnest.html}{tidyr::unnest()}
though \code{collapse_to_rvec()} and
\code{expand_from_rvec()} move values into and
out of rvecs, while \code{tidyr::nest()} and
\code{tidyr::unnest()} move them in and out
of data frames. (\code{tidyr::nest()} and
\code{tidyr::unnest()} are also a lot
more flexible.)
}
